// tslint:disable
/**
 * Hinatazaka API
 * 日向坂46を題材にしたサンプルAPI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * ディスコグラフィー情報
 * @export
 * @interface Discography
 */
export interface Discography {
    /**
     * ID
     * @type {number}
     * @memberof Discography
     */
    id?: number;
    /**
     * タイトル
     * @type {string}
     * @memberof Discography
     */
    title?: string;
    /**
     * 種別
     * @type {string}
     * @memberof Discography
     */
    type?: string;
    /**
     * センターのメンバーID
     * @type {number}
     * @memberof Discography
     */
    center_id?: number;
}
/**
 * メンバー情報
 * @export
 * @interface Member
 */
export interface Member {
    /**
     * ID
     * @type {number}
     * @memberof Member
     */
    id?: number;
    /**
     * 名前
     * @type {string}
     * @memberof Member
     */
    name?: string;
    /**
     * 年齢
     * @type {number}
     * @memberof Member
     */
    age?: number;
}

/**
 * HinatazakaApi - axios parameter creator
 * @export
 */
export const HinatazakaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ディスコグラフィー情報を取得する
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscographyId: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getDiscographyId.');
            }
            const localVarPath = `/discography/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メンバーの情報を取得する
         * @param {number} id ID of pet to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMemberId.');
            }
            const localVarPath = `/member/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メンバーの情報を登録する
         * @param {string} id 
         * @param {Member} [member] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMemberId: async (id: string, member?: Member, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling postMemberId.');
            }
            const localVarPath = `/member/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof member !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(member !== undefined ? member : {}) : (member || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HinatazakaApi - functional programming interface
 * @export
 */
export const HinatazakaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * ディスコグラフィー情報を取得する
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDiscographyId(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Discography>> {
            const localVarAxiosArgs = await HinatazakaApiAxiosParamCreator(configuration).getDiscographyId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * メンバーの情報を取得する
         * @param {number} id ID of pet to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Member>> {
            const localVarAxiosArgs = await HinatazakaApiAxiosParamCreator(configuration).getMemberId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * メンバーの情報を登録する
         * @param {string} id 
         * @param {Member} [member] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMemberId(id: string, member?: Member, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await HinatazakaApiAxiosParamCreator(configuration).postMemberId(id, member, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HinatazakaApi - factory interface
 * @export
 */
export const HinatazakaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * ディスコグラフィー情報を取得する
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDiscographyId(id: string, options?: any): AxiosPromise<Discography> {
            return HinatazakaApiFp(configuration).getDiscographyId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * メンバーの情報を取得する
         * @param {number} id ID of pet to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberId(id: number, options?: any): AxiosPromise<Member> {
            return HinatazakaApiFp(configuration).getMemberId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * メンバーの情報を登録する
         * @param {string} id 
         * @param {Member} [member] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMemberId(id: string, member?: Member, options?: any): AxiosPromise<void> {
            return HinatazakaApiFp(configuration).postMemberId(id, member, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HinatazakaApi - object-oriented interface
 * @export
 * @class HinatazakaApi
 * @extends {BaseAPI}
 */
export class HinatazakaApi extends BaseAPI {
    /**
     * ディスコグラフィー情報を取得する
     * @summary Your GET endpoint
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HinatazakaApi
     */
    public getDiscographyId(id: string, options?: any) {
        return HinatazakaApiFp(this.configuration).getDiscographyId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メンバーの情報を取得する
     * @param {number} id ID of pet to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HinatazakaApi
     */
    public getMemberId(id: number, options?: any) {
        return HinatazakaApiFp(this.configuration).getMemberId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メンバーの情報を登録する
     * @param {string} id 
     * @param {Member} [member] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HinatazakaApi
     */
    public postMemberId(id: string, member?: Member, options?: any) {
        return HinatazakaApiFp(this.configuration).postMemberId(id, member, options).then((request) => request(this.axios, this.basePath));
    }

}


