openapi: 3.0.1
info:
  title: Hinatazaka API
  description: 日向坂46を題材にしたサンプルAPI
  version: 1.0.0
paths:
  '/members/{id}':
    get:
      description: メンバーの情報を取得する
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful member response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
              examples:
                dummy:
                  value:
                    id: 14
                    name: 小坂菜緒
                    age: 18
      summary: メンバー情報
      operationId: get-member-id
      tags:
        - hinatazaka
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    delete:
      summary: ''
      operationId: delete-members-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      description: メンバーの情報を削除する
      tags:
        - hinatazaka
    put:
      summary: ''
      operationId: put-members-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      description: メンバーの情報を更新する
      tags:
        - hinatazaka
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
        description: 更新するメンバー情報
  '/discography/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: ディスコグラフィー情報
      tags:
        - hinatazaka
      responses:
        '200':
          description: successful discography response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discography'
              examples:
                dummy:
                  value:
                    id: 1
                    title: キュン
                    type: single
      operationId: get-discography-id
      description: ディスコグラフィー情報を取得する
  /members:
    get:
      summary: 全メンバー情報
      tags:
        - hinatazaka
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
      operationId: get-members
      description: 全メンバーの情報を取得する
    post:
      summary: ''
      operationId: post-members
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
      description: 新しいメンバーを追加する
      tags:
        - hinatazaka
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
        description: 新しいメンバー情報
  /member/add: {}
  /auth:
    get:
      summary: ''
      operationId: get-auth
      responses:
        '200':
          description: OK
      tags:
        - auth
  /callback:
    get:
      summary: Your GET endpoint
      tags:
        - auth
      responses: {}
      operationId: get-callback
components:
  schemas:
    Member:
      type: object
      title: Member
      description: メンバー情報
      properties:
        id:
          type: integer
          format: int64
          description: ID
        name:
          type: string
          description: 名前
        age:
          type: number
          description: 年齢
        created_at:
          type: string
          description: レコードの作成日時
          format: date-time
      required:
        - name
    Discography:
      title: Discography
      type: object
      description: ディスコグラフィー情報
      properties:
        id:
          type: number
          description: ID
        title:
          type: string
          description: タイトル
        type:
          type: string
          description: 種別
        center_id:
          type: number
          description: センターのメンバーID
        created_at:
          type: string
          description: レコードの作成日時
          format: date-time
      required:
        - title
servers:
  - description: ''
    url: 'https://localhost/api'
