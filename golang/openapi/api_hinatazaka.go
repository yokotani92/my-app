/*
 * Hinatazaka API
 *
 * 日向坂46を題材にしたサンプルAPI
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A HinatazakaApiController binds http requests to an api service and writes the service results to the http response
type HinatazakaApiController struct {
	service HinatazakaApiServicer
}

// NewHinatazakaApiController creates a default api controller
func NewHinatazakaApiController(s HinatazakaApiServicer) Router {
	return &HinatazakaApiController{ service: s }
}

// Routes returns all of the api route for the HinatazakaApiController
func (c *HinatazakaApiController) Routes() Routes {
	return Routes{ 
		{
			"DeleteMembersId",
			strings.ToUpper("Delete"),
			"/members/{id}",
			c.DeleteMembersId,
		},
		{
			"GetDiscographyId",
			strings.ToUpper("Get"),
			"/discography/{id}",
			c.GetDiscographyId,
		},
		{
			"GetMemberId",
			strings.ToUpper("Get"),
			"/members/{id}",
			c.GetMemberId,
		},
		{
			"GetMembers",
			strings.ToUpper("Get"),
			"/members",
			c.GetMembers,
		},
		{
			"PostMembers",
			strings.ToUpper("Post"),
			"/members",
			c.PostMembers,
		},
		{
			"PutMembersId",
			strings.ToUpper("Put"),
			"/members/{id}",
			c.PutMembersId,
		},
	}
}

// DeleteMembersId - 
func (c *HinatazakaApiController) DeleteMembersId(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.DeleteMembersId(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetDiscographyId - ディスコグラフィー情報
func (c *HinatazakaApiController) GetDiscographyId(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.GetDiscographyId(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetMemberId - メンバー情報
func (c *HinatazakaApiController) GetMemberId(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id, err := parseIntParameter(params["id"])
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.GetMemberId(id)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// GetMembers - 全メンバー情報
func (c *HinatazakaApiController) GetMembers(w http.ResponseWriter, r *http.Request) { 
	result, err := c.service.GetMembers()
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// PostMembers - 
func (c *HinatazakaApiController) PostMembers(w http.ResponseWriter, r *http.Request) { 
	member := &Member{}
	if err := json.NewDecoder(r.Body).Decode(&member); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.PostMembers(*member)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}

// PutMembersId - 
func (c *HinatazakaApiController) PutMembersId(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	member := &Member{}
	if err := json.NewDecoder(r.Body).Decode(&member); err != nil {
		w.WriteHeader(500)
		return
	}
	
	result, err := c.service.PutMembersId(id, *member)
	if err != nil {
		w.WriteHeader(500)
		return
	}
	
	EncodeJSONResponse(result, nil, w)
}
