/*
 * Hinatazaka API
 *
 * 日向坂46を題材にしたサンプルAPI
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"errors"

	database "github.com/GIT_USER_ID/GIT_REPO_ID/database"
)

// HinatazakaApiService is a service that implents the logic for the HinatazakaApiServicer
// This service should implement the business logic for every endpoint for the HinatazakaApi API.
// Include any external packages or services that will be required by this service.
type HinatazakaApiService struct {
}

// NewHinatazakaApiService creates a default api service
func NewHinatazakaApiService() HinatazakaApiServicer {
	return &HinatazakaApiService{}
}

// GetDiscographyId - Your GET endpoint
func (s *HinatazakaApiService) GetDiscographyId(id string) (interface{}, error) {
	discography := Discography{}
	// err = db.Get(&member, "SELECT * FROM members LIMIT 1")
	row := database.DB.QueryRow("SELECT * FROM discographies WHERE id=$1", id)
	err := row.Scan(&discography.Id, &discography.Title, &discography.Type, &discography.CenterId, &discography.CreatedAt)
	return discography, err
}

// GetMemberId -
func (s *HinatazakaApiService) GetMemberId(id int64) (interface{}, error) {
	member := Member{}
	// err = db.Get(&member, "SELECT * FROM members LIMIT 1")
	row := database.DB.QueryRow("SELECT * FROM members WHERE id=$1", id)
	err := row.Scan(&member.Id, &member.Name, &member.Age, &member.CreatedAt)
	return member, err
}

// PostMemberId -
func (s *HinatazakaApiService) PostMemberId(id string, member Member) (interface{}, error) {
	// TODO - update PostMemberId with the required logic for this service method.
	// Add api_hinatazaka_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	return nil, errors.New("service method 'PostMemberId' not implemented")
}
