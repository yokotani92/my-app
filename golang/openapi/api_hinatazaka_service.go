/*
 * Hinatazaka API
 *
 * 日向坂46を題材にしたサンプルAPI
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"errors"

	database "github.com/GIT_USER_ID/GIT_REPO_ID/database"
)

// HinatazakaApiService is a service that implents the logic for the HinatazakaApiServicer
// This service should implement the business logic for every endpoint for the HinatazakaApi API.
// Include any external packages or services that will be required by this service.
type HinatazakaApiService struct {
}

// NewHinatazakaApiService creates a default api service
func NewHinatazakaApiService() HinatazakaApiServicer {
	return &HinatazakaApiService{}
}

// DeleteMembersId -
func (s *HinatazakaApiService) DeleteMembersId(id string) (interface{}, error) {
	m := Member{}
	row := database.DB.QueryRow("DELETE FROM members WHERE id=$1 RETURNING *", id)
	err := row.Scan(&m.Id, &m.Name, &m.Age, &m.CreatedAt)
	return m, err
}

// GetDiscographyId - ディスコグラフィー情報
func (s *HinatazakaApiService) GetDiscographyId(id string) (interface{}, error) {
	d := Discography{}
	row := database.DB.QueryRow("SELECT * FROM discographies WHERE id=$1", id)
	err := row.Scan(&d.Id, &d.Title, &d.Type, &d.CenterId, &d.CreatedAt)
	return d, err
}

// GetMemberId - メンバー情報
func (s *HinatazakaApiService) GetMemberId(id int64) (interface{}, error) {
	m := Member{}
	// err = database.DB.Get(&m, "SELECT * FROM members LIMIT 1")
	row := database.DB.QueryRow("SELECT * FROM members WHERE id=$1", id)
	err := row.Scan(&m.Id, &m.Name, &m.Age, &m.CreatedAt)
	return m, err
}

// GetMembers - 全メンバー情報
func (s *HinatazakaApiService) GetMembers() (interface{}, error) {
	ms := []Member{}
	rows, err := database.DB.Queryx("SELECT * FROM members")
	for rows.Next() {
		var m Member
		err = rows.StructScan(&m)
		ms = append(ms, m)
	}
	return ms, err
}

// PostMembers -
func (s *HinatazakaApiService) PostMembers(member Member) (interface{}, error) {
	m := Member{}
	row := database.DB.QueryRow("INSERT INTO members (name, age) VALUES ($1, $2) RETURNING *", member.Name, member.Age)
	err := row.Scan(&m.Id, &m.Name, &m.Age, &m.CreatedAt)
	return m, err
}

// PutMembersId -
func (s *HinatazakaApiService) PutMembersId(id string, member Member) (interface{}, error) {
	// TODO - update PutMembersId with the required logic for this service method.
	// Add api_hinatazaka_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.
	return nil, errors.New("service method 'PutMembersId' not implemented")
}
