/*
 * Hinatazaka API
 *
 * 日向坂46を題材にしたサンプルAPI
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/coreos/go-oidc"
	"golang.org/x/oauth2"
)

// A AuthApiController binds http requests to an api service and writes the service results to the http response
type AuthApiController struct {
	service AuthApiServicer
}

// NewAuthApiController creates a default api controller
func NewAuthApiController(s AuthApiServicer) Router {
	return &AuthApiController{service: s}
}

// Routes returns all of the api route for the AuthApiController
func (c *AuthApiController) Routes() Routes {
	return Routes{
		{
			"GetAuth",
			strings.ToUpper("Get"),
			"/api/auth",
			c.GetAuth,
		},
		{
			"GetCallback",
			strings.ToUpper("Get"),
			"/api/callback",
			c.GetCallback,
		},
	}
}

// GetAuth -
func (c *AuthApiController) GetAuth(w http.ResponseWriter, r *http.Request) {
	provider, err := oidc.NewProvider(r.Context(), "https://accounts.google.com")
	if err != nil {
		log.Fatal(err)
	}

	config := oauth2.Config{
		ClientID:     os.Getenv("CLIENT_ID"),
		ClientSecret: os.Getenv("CLIENT_SECRET"),
		Endpoint:     provider.Endpoint(),
		RedirectURL:  "https://localhost/api/callback",
		Scopes:       []string{oidc.ScopeOpenID, "profile", "email"},
	}

	state := os.Getenv("RANDOM_STRING")

	authURL := config.AuthCodeURL(state)
	http.Redirect(w, r, authURL, http.StatusFound)
}

// GetCallback - Your GET endpoint
func (c *AuthApiController) GetCallback(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// この部分は /auth のコードと同じ
	provider, err := oidc.NewProvider(ctx, "https://accounts.google.com")
	if err != nil {
		log.Fatal(err)

	}

	config := oauth2.Config{
		ClientID:     os.Getenv("CLIENT_ID"),
		ClientSecret: os.Getenv("CLIENT_SECRET"),
		Endpoint:     provider.Endpoint(),
		RedirectURL:  "https://localhost/api/callback",
		Scopes:       []string{oidc.ScopeOpenID, "profile", "email"},
	}

	// state := r.URL.Query().Get("state")
	// stateが返ってくるので認証画面へのリダイレクト時に渡したパラメータと矛盾がないか検証
	// verifyState(state)

	// codeをもとにトークンエンドポイントから IDトークン を取得
	code := r.URL.Query().Get("code")
	oauth2Token, err := config.Exchange(ctx, code)
	if err != nil {
		http.Error(w, "Failed to exchange token: "+err.Error(), http.StatusInternalServerError)
		return
	}

	// IDトークンを取り出す
	rawIDToken, ok := oauth2Token.Extra("id_token").(string)
	if !ok {
		http.Error(w, "missing token", http.StatusInternalServerError)
		return
	}

	oidcConfig := &oidc.Config{
		ClientID: os.Getenv("CLIENT_ID"),
	}

	verifier := provider.Verifier(oidcConfig)

	// IDトークンの正当性の検証
	idToken, err := verifier.Verify(ctx, rawIDToken)
	if err != nil {
		http.Error(w, "Failed to verify ID Token: "+err.Error(), http.StatusInternalServerError)
		return
	}

	// アプリケーションのデータ構造におとすときは以下のように書く
	idTokenClaims := map[string]interface{}{}
	if err := idToken.Claims(&idTokenClaims); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	fmt.Printf("%#v", idTokenClaims)
	fmt.Fprintf(w, "認証成功")
}
